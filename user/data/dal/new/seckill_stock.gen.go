// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package new

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"my_e_commerce/data/dal/model"
)

func newSeckillStock(db *gorm.DB, opts ...gen.DOOption) seckillStock {
	_seckillStock := seckillStock{}

	_seckillStock.seckillStockDo.UseDB(db, opts...)
	_seckillStock.seckillStockDo.UseModel(&model.SeckillStock{})

	tableName := _seckillStock.seckillStockDo.TableName()
	_seckillStock.ALL = field.NewAsterisk(tableName)
	_seckillStock.ID = field.NewUint32(tableName, "id")
	_seckillStock.GoodsID = field.NewUint32(tableName, "goods_id")
	_seckillStock.Stock = field.NewUint32(tableName, "stock")
	_seckillStock.CreateTime = field.NewTime(tableName, "create_time")
	_seckillStock.ModifyTime = field.NewTime(tableName, "modify_time")

	_seckillStock.fillFieldMap()

	return _seckillStock
}

// seckillStock 秒杀库存表
type seckillStock struct {
	seckillStockDo

	ALL        field.Asterisk
	ID         field.Uint32 // ID
	GoodsID    field.Uint32 // 商品ID
	Stock      field.Uint32 // 库存大小
	CreateTime field.Time   // 创建时间
	ModifyTime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (s seckillStock) Table(newTableName string) *seckillStock {
	s.seckillStockDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s seckillStock) As(alias string) *seckillStock {
	s.seckillStockDo.DO = *(s.seckillStockDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *seckillStock) updateTableName(table string) *seckillStock {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint32(table, "id")
	s.GoodsID = field.NewUint32(table, "goods_id")
	s.Stock = field.NewUint32(table, "stock")
	s.CreateTime = field.NewTime(table, "create_time")
	s.ModifyTime = field.NewTime(table, "modify_time")

	s.fillFieldMap()

	return s
}

func (s *seckillStock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *seckillStock) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["goods_id"] = s.GoodsID
	s.fieldMap["stock"] = s.Stock
	s.fieldMap["create_time"] = s.CreateTime
	s.fieldMap["modify_time"] = s.ModifyTime
}

func (s seckillStock) clone(db *gorm.DB) seckillStock {
	s.seckillStockDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s seckillStock) replaceDB(db *gorm.DB) seckillStock {
	s.seckillStockDo.ReplaceDB(db)
	return s
}

type seckillStockDo struct{ gen.DO }

type ISeckillStockDo interface {
	gen.SubQuery
	Debug() ISeckillStockDo
	WithContext(ctx context.Context) ISeckillStockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISeckillStockDo
	WriteDB() ISeckillStockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISeckillStockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISeckillStockDo
	Not(conds ...gen.Condition) ISeckillStockDo
	Or(conds ...gen.Condition) ISeckillStockDo
	Select(conds ...field.Expr) ISeckillStockDo
	Where(conds ...gen.Condition) ISeckillStockDo
	Order(conds ...field.Expr) ISeckillStockDo
	Distinct(cols ...field.Expr) ISeckillStockDo
	Omit(cols ...field.Expr) ISeckillStockDo
	Join(table schema.Tabler, on ...field.Expr) ISeckillStockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISeckillStockDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISeckillStockDo
	Group(cols ...field.Expr) ISeckillStockDo
	Having(conds ...gen.Condition) ISeckillStockDo
	Limit(limit int) ISeckillStockDo
	Offset(offset int) ISeckillStockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISeckillStockDo
	Unscoped() ISeckillStockDo
	Create(values ...*model.SeckillStock) error
	CreateInBatches(values []*model.SeckillStock, batchSize int) error
	Save(values ...*model.SeckillStock) error
	First() (*model.SeckillStock, error)
	Take() (*model.SeckillStock, error)
	Last() (*model.SeckillStock, error)
	Find() ([]*model.SeckillStock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeckillStock, err error)
	FindInBatches(result *[]*model.SeckillStock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SeckillStock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISeckillStockDo
	Assign(attrs ...field.AssignExpr) ISeckillStockDo
	Joins(fields ...field.RelationField) ISeckillStockDo
	Preload(fields ...field.RelationField) ISeckillStockDo
	FirstOrInit() (*model.SeckillStock, error)
	FirstOrCreate() (*model.SeckillStock, error)
	FindByPage(offset int, limit int) (result []*model.SeckillStock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISeckillStockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s seckillStockDo) Debug() ISeckillStockDo {
	return s.withDO(s.DO.Debug())
}

func (s seckillStockDo) WithContext(ctx context.Context) ISeckillStockDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s seckillStockDo) ReadDB() ISeckillStockDo {
	return s.Clauses(dbresolver.Read)
}

func (s seckillStockDo) WriteDB() ISeckillStockDo {
	return s.Clauses(dbresolver.Write)
}

func (s seckillStockDo) Session(config *gorm.Session) ISeckillStockDo {
	return s.withDO(s.DO.Session(config))
}

func (s seckillStockDo) Clauses(conds ...clause.Expression) ISeckillStockDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s seckillStockDo) Returning(value interface{}, columns ...string) ISeckillStockDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s seckillStockDo) Not(conds ...gen.Condition) ISeckillStockDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s seckillStockDo) Or(conds ...gen.Condition) ISeckillStockDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s seckillStockDo) Select(conds ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s seckillStockDo) Where(conds ...gen.Condition) ISeckillStockDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s seckillStockDo) Order(conds ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s seckillStockDo) Distinct(cols ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s seckillStockDo) Omit(cols ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s seckillStockDo) Join(table schema.Tabler, on ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s seckillStockDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s seckillStockDo) RightJoin(table schema.Tabler, on ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s seckillStockDo) Group(cols ...field.Expr) ISeckillStockDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s seckillStockDo) Having(conds ...gen.Condition) ISeckillStockDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s seckillStockDo) Limit(limit int) ISeckillStockDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s seckillStockDo) Offset(offset int) ISeckillStockDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s seckillStockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISeckillStockDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s seckillStockDo) Unscoped() ISeckillStockDo {
	return s.withDO(s.DO.Unscoped())
}

func (s seckillStockDo) Create(values ...*model.SeckillStock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s seckillStockDo) CreateInBatches(values []*model.SeckillStock, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s seckillStockDo) Save(values ...*model.SeckillStock) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s seckillStockDo) First() (*model.SeckillStock, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillStock), nil
	}
}

func (s seckillStockDo) Take() (*model.SeckillStock, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillStock), nil
	}
}

func (s seckillStockDo) Last() (*model.SeckillStock, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillStock), nil
	}
}

func (s seckillStockDo) Find() ([]*model.SeckillStock, error) {
	result, err := s.DO.Find()
	return result.([]*model.SeckillStock), err
}

func (s seckillStockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SeckillStock, err error) {
	buf := make([]*model.SeckillStock, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s seckillStockDo) FindInBatches(result *[]*model.SeckillStock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s seckillStockDo) Attrs(attrs ...field.AssignExpr) ISeckillStockDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s seckillStockDo) Assign(attrs ...field.AssignExpr) ISeckillStockDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s seckillStockDo) Joins(fields ...field.RelationField) ISeckillStockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s seckillStockDo) Preload(fields ...field.RelationField) ISeckillStockDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s seckillStockDo) FirstOrInit() (*model.SeckillStock, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillStock), nil
	}
}

func (s seckillStockDo) FirstOrCreate() (*model.SeckillStock, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SeckillStock), nil
	}
}

func (s seckillStockDo) FindByPage(offset int, limit int) (result []*model.SeckillStock, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s seckillStockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s seckillStockDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s seckillStockDo) Delete(models ...*model.SeckillStock) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *seckillStockDo) withDO(do gen.Dao) *seckillStockDo {
	s.DO = *do.(*gen.DO)
	return s
}
