// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package new

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"my_e_commerce/data/dal/model"
)

func newQuotum(db *gorm.DB, opts ...gen.DOOption) quotum {
	_quotum := quotum{}

	_quotum.quotumDo.UseDB(db, opts...)
	_quotum.quotumDo.UseModel(&model.Quotum{})

	tableName := _quotum.quotumDo.TableName()
	_quotum.ALL = field.NewAsterisk(tableName)
	_quotum.ID = field.NewUint32(tableName, "id")
	_quotum.GoodsID = field.NewUint32(tableName, "goods_id")
	_quotum.Num = field.NewUint32(tableName, "num")
	_quotum.CreateTime = field.NewTime(tableName, "create_time")
	_quotum.ModifyTime = field.NewTime(tableName, "modify_time")

	_quotum.fillFieldMap()

	return _quotum
}

// quotum 限额表
type quotum struct {
	quotumDo

	ALL        field.Asterisk
	ID         field.Uint32 // ID
	GoodsID    field.Uint32 // 商品ID
	Num        field.Uint32 // 限额
	CreateTime field.Time   // 创建时间
	ModifyTime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (q quotum) Table(newTableName string) *quotum {
	q.quotumDo.UseTable(newTableName)
	return q.updateTableName(newTableName)
}

func (q quotum) As(alias string) *quotum {
	q.quotumDo.DO = *(q.quotumDo.As(alias).(*gen.DO))
	return q.updateTableName(alias)
}

func (q *quotum) updateTableName(table string) *quotum {
	q.ALL = field.NewAsterisk(table)
	q.ID = field.NewUint32(table, "id")
	q.GoodsID = field.NewUint32(table, "goods_id")
	q.Num = field.NewUint32(table, "num")
	q.CreateTime = field.NewTime(table, "create_time")
	q.ModifyTime = field.NewTime(table, "modify_time")

	q.fillFieldMap()

	return q
}

func (q *quotum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := q.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (q *quotum) fillFieldMap() {
	q.fieldMap = make(map[string]field.Expr, 5)
	q.fieldMap["id"] = q.ID
	q.fieldMap["goods_id"] = q.GoodsID
	q.fieldMap["num"] = q.Num
	q.fieldMap["create_time"] = q.CreateTime
	q.fieldMap["modify_time"] = q.ModifyTime
}

func (q quotum) clone(db *gorm.DB) quotum {
	q.quotumDo.ReplaceConnPool(db.Statement.ConnPool)
	return q
}

func (q quotum) replaceDB(db *gorm.DB) quotum {
	q.quotumDo.ReplaceDB(db)
	return q
}

type quotumDo struct{ gen.DO }

type IQuotumDo interface {
	gen.SubQuery
	Debug() IQuotumDo
	WithContext(ctx context.Context) IQuotumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IQuotumDo
	WriteDB() IQuotumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IQuotumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IQuotumDo
	Not(conds ...gen.Condition) IQuotumDo
	Or(conds ...gen.Condition) IQuotumDo
	Select(conds ...field.Expr) IQuotumDo
	Where(conds ...gen.Condition) IQuotumDo
	Order(conds ...field.Expr) IQuotumDo
	Distinct(cols ...field.Expr) IQuotumDo
	Omit(cols ...field.Expr) IQuotumDo
	Join(table schema.Tabler, on ...field.Expr) IQuotumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IQuotumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IQuotumDo
	Group(cols ...field.Expr) IQuotumDo
	Having(conds ...gen.Condition) IQuotumDo
	Limit(limit int) IQuotumDo
	Offset(offset int) IQuotumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotumDo
	Unscoped() IQuotumDo
	Create(values ...*model.Quotum) error
	CreateInBatches(values []*model.Quotum, batchSize int) error
	Save(values ...*model.Quotum) error
	First() (*model.Quotum, error)
	Take() (*model.Quotum, error)
	Last() (*model.Quotum, error)
	Find() ([]*model.Quotum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quotum, err error)
	FindInBatches(result *[]*model.Quotum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Quotum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IQuotumDo
	Assign(attrs ...field.AssignExpr) IQuotumDo
	Joins(fields ...field.RelationField) IQuotumDo
	Preload(fields ...field.RelationField) IQuotumDo
	FirstOrInit() (*model.Quotum, error)
	FirstOrCreate() (*model.Quotum, error)
	FindByPage(offset int, limit int) (result []*model.Quotum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IQuotumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (q quotumDo) Debug() IQuotumDo {
	return q.withDO(q.DO.Debug())
}

func (q quotumDo) WithContext(ctx context.Context) IQuotumDo {
	return q.withDO(q.DO.WithContext(ctx))
}

func (q quotumDo) ReadDB() IQuotumDo {
	return q.Clauses(dbresolver.Read)
}

func (q quotumDo) WriteDB() IQuotumDo {
	return q.Clauses(dbresolver.Write)
}

func (q quotumDo) Session(config *gorm.Session) IQuotumDo {
	return q.withDO(q.DO.Session(config))
}

func (q quotumDo) Clauses(conds ...clause.Expression) IQuotumDo {
	return q.withDO(q.DO.Clauses(conds...))
}

func (q quotumDo) Returning(value interface{}, columns ...string) IQuotumDo {
	return q.withDO(q.DO.Returning(value, columns...))
}

func (q quotumDo) Not(conds ...gen.Condition) IQuotumDo {
	return q.withDO(q.DO.Not(conds...))
}

func (q quotumDo) Or(conds ...gen.Condition) IQuotumDo {
	return q.withDO(q.DO.Or(conds...))
}

func (q quotumDo) Select(conds ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.Select(conds...))
}

func (q quotumDo) Where(conds ...gen.Condition) IQuotumDo {
	return q.withDO(q.DO.Where(conds...))
}

func (q quotumDo) Order(conds ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.Order(conds...))
}

func (q quotumDo) Distinct(cols ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.Distinct(cols...))
}

func (q quotumDo) Omit(cols ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.Omit(cols...))
}

func (q quotumDo) Join(table schema.Tabler, on ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.Join(table, on...))
}

func (q quotumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.LeftJoin(table, on...))
}

func (q quotumDo) RightJoin(table schema.Tabler, on ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.RightJoin(table, on...))
}

func (q quotumDo) Group(cols ...field.Expr) IQuotumDo {
	return q.withDO(q.DO.Group(cols...))
}

func (q quotumDo) Having(conds ...gen.Condition) IQuotumDo {
	return q.withDO(q.DO.Having(conds...))
}

func (q quotumDo) Limit(limit int) IQuotumDo {
	return q.withDO(q.DO.Limit(limit))
}

func (q quotumDo) Offset(offset int) IQuotumDo {
	return q.withDO(q.DO.Offset(offset))
}

func (q quotumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IQuotumDo {
	return q.withDO(q.DO.Scopes(funcs...))
}

func (q quotumDo) Unscoped() IQuotumDo {
	return q.withDO(q.DO.Unscoped())
}

func (q quotumDo) Create(values ...*model.Quotum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Create(values)
}

func (q quotumDo) CreateInBatches(values []*model.Quotum, batchSize int) error {
	return q.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (q quotumDo) Save(values ...*model.Quotum) error {
	if len(values) == 0 {
		return nil
	}
	return q.DO.Save(values)
}

func (q quotumDo) First() (*model.Quotum, error) {
	if result, err := q.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quotum), nil
	}
}

func (q quotumDo) Take() (*model.Quotum, error) {
	if result, err := q.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quotum), nil
	}
}

func (q quotumDo) Last() (*model.Quotum, error) {
	if result, err := q.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quotum), nil
	}
}

func (q quotumDo) Find() ([]*model.Quotum, error) {
	result, err := q.DO.Find()
	return result.([]*model.Quotum), err
}

func (q quotumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Quotum, err error) {
	buf := make([]*model.Quotum, 0, batchSize)
	err = q.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (q quotumDo) FindInBatches(result *[]*model.Quotum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return q.DO.FindInBatches(result, batchSize, fc)
}

func (q quotumDo) Attrs(attrs ...field.AssignExpr) IQuotumDo {
	return q.withDO(q.DO.Attrs(attrs...))
}

func (q quotumDo) Assign(attrs ...field.AssignExpr) IQuotumDo {
	return q.withDO(q.DO.Assign(attrs...))
}

func (q quotumDo) Joins(fields ...field.RelationField) IQuotumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Joins(_f))
	}
	return &q
}

func (q quotumDo) Preload(fields ...field.RelationField) IQuotumDo {
	for _, _f := range fields {
		q = *q.withDO(q.DO.Preload(_f))
	}
	return &q
}

func (q quotumDo) FirstOrInit() (*model.Quotum, error) {
	if result, err := q.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quotum), nil
	}
}

func (q quotumDo) FirstOrCreate() (*model.Quotum, error) {
	if result, err := q.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Quotum), nil
	}
}

func (q quotumDo) FindByPage(offset int, limit int) (result []*model.Quotum, count int64, err error) {
	result, err = q.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = q.Offset(-1).Limit(-1).Count()
	return
}

func (q quotumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = q.Count()
	if err != nil {
		return
	}

	err = q.Offset(offset).Limit(limit).Scan(result)
	return
}

func (q quotumDo) Scan(result interface{}) (err error) {
	return q.DO.Scan(result)
}

func (q quotumDo) Delete(models ...*model.Quotum) (result gen.ResultInfo, err error) {
	return q.DO.Delete(models)
}

func (q *quotumDo) withDO(do gen.Dao) *quotumDo {
	q.DO = *do.(*gen.DO)
	return q
}
