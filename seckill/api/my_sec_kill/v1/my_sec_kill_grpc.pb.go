// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: api/my_sec_kill/v1/my_sec_kill.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MySecKill_CreateMySecKill_FullMethodName = "/api.my_sec_kill.v1.MySecKill/CreateMySecKill"
	MySecKill_UpdateMySecKill_FullMethodName = "/api.my_sec_kill.v1.MySecKill/UpdateMySecKill"
	MySecKill_DeleteMySecKill_FullMethodName = "/api.my_sec_kill.v1.MySecKill/DeleteMySecKill"
	MySecKill_GetMySecKill_FullMethodName    = "/api.my_sec_kill.v1.MySecKill/GetMySecKill"
	MySecKill_ListMySecKill_FullMethodName   = "/api.my_sec_kill.v1.MySecKill/ListMySecKill"
)

// MySecKillClient is the client API for MySecKill service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySecKillClient interface {
	CreateMySecKill(ctx context.Context, in *CreateMySecKillRequest, opts ...grpc.CallOption) (*CreateMySecKillReply, error)
	UpdateMySecKill(ctx context.Context, in *UpdateMySecKillRequest, opts ...grpc.CallOption) (*UpdateMySecKillReply, error)
	DeleteMySecKill(ctx context.Context, in *DeleteMySecKillRequest, opts ...grpc.CallOption) (*DeleteMySecKillReply, error)
	GetMySecKill(ctx context.Context, in *GetMySecKillRequest, opts ...grpc.CallOption) (*GetMySecKillReply, error)
	ListMySecKill(ctx context.Context, in *ListMySecKillRequest, opts ...grpc.CallOption) (*ListMySecKillReply, error)
}

type mySecKillClient struct {
	cc grpc.ClientConnInterface
}

func NewMySecKillClient(cc grpc.ClientConnInterface) MySecKillClient {
	return &mySecKillClient{cc}
}

func (c *mySecKillClient) CreateMySecKill(ctx context.Context, in *CreateMySecKillRequest, opts ...grpc.CallOption) (*CreateMySecKillReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMySecKillReply)
	err := c.cc.Invoke(ctx, MySecKill_CreateMySecKill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySecKillClient) UpdateMySecKill(ctx context.Context, in *UpdateMySecKillRequest, opts ...grpc.CallOption) (*UpdateMySecKillReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMySecKillReply)
	err := c.cc.Invoke(ctx, MySecKill_UpdateMySecKill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySecKillClient) DeleteMySecKill(ctx context.Context, in *DeleteMySecKillRequest, opts ...grpc.CallOption) (*DeleteMySecKillReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMySecKillReply)
	err := c.cc.Invoke(ctx, MySecKill_DeleteMySecKill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySecKillClient) GetMySecKill(ctx context.Context, in *GetMySecKillRequest, opts ...grpc.CallOption) (*GetMySecKillReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMySecKillReply)
	err := c.cc.Invoke(ctx, MySecKill_GetMySecKill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySecKillClient) ListMySecKill(ctx context.Context, in *ListMySecKillRequest, opts ...grpc.CallOption) (*ListMySecKillReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMySecKillReply)
	err := c.cc.Invoke(ctx, MySecKill_ListMySecKill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySecKillServer is the server API for MySecKill service.
// All implementations must embed UnimplementedMySecKillServer
// for forward compatibility.
type MySecKillServer interface {
	CreateMySecKill(context.Context, *CreateMySecKillRequest) (*CreateMySecKillReply, error)
	UpdateMySecKill(context.Context, *UpdateMySecKillRequest) (*UpdateMySecKillReply, error)
	DeleteMySecKill(context.Context, *DeleteMySecKillRequest) (*DeleteMySecKillReply, error)
	GetMySecKill(context.Context, *GetMySecKillRequest) (*GetMySecKillReply, error)
	ListMySecKill(context.Context, *ListMySecKillRequest) (*ListMySecKillReply, error)
	mustEmbedUnimplementedMySecKillServer()
}

// UnimplementedMySecKillServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMySecKillServer struct{}

func (UnimplementedMySecKillServer) CreateMySecKill(context.Context, *CreateMySecKillRequest) (*CreateMySecKillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMySecKill not implemented")
}
func (UnimplementedMySecKillServer) UpdateMySecKill(context.Context, *UpdateMySecKillRequest) (*UpdateMySecKillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMySecKill not implemented")
}
func (UnimplementedMySecKillServer) DeleteMySecKill(context.Context, *DeleteMySecKillRequest) (*DeleteMySecKillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMySecKill not implemented")
}
func (UnimplementedMySecKillServer) GetMySecKill(context.Context, *GetMySecKillRequest) (*GetMySecKillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMySecKill not implemented")
}
func (UnimplementedMySecKillServer) ListMySecKill(context.Context, *ListMySecKillRequest) (*ListMySecKillReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMySecKill not implemented")
}
func (UnimplementedMySecKillServer) mustEmbedUnimplementedMySecKillServer() {}
func (UnimplementedMySecKillServer) testEmbeddedByValue()                   {}

// UnsafeMySecKillServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySecKillServer will
// result in compilation errors.
type UnsafeMySecKillServer interface {
	mustEmbedUnimplementedMySecKillServer()
}

func RegisterMySecKillServer(s grpc.ServiceRegistrar, srv MySecKillServer) {
	// If the following call pancis, it indicates UnimplementedMySecKillServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MySecKill_ServiceDesc, srv)
}

func _MySecKill_CreateMySecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMySecKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecKillServer).CreateMySecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecKill_CreateMySecKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecKillServer).CreateMySecKill(ctx, req.(*CreateMySecKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySecKill_UpdateMySecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMySecKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecKillServer).UpdateMySecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecKill_UpdateMySecKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecKillServer).UpdateMySecKill(ctx, req.(*UpdateMySecKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySecKill_DeleteMySecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMySecKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecKillServer).DeleteMySecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecKill_DeleteMySecKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecKillServer).DeleteMySecKill(ctx, req.(*DeleteMySecKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySecKill_GetMySecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMySecKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecKillServer).GetMySecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecKill_GetMySecKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecKillServer).GetMySecKill(ctx, req.(*GetMySecKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySecKill_ListMySecKill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMySecKillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecKillServer).ListMySecKill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecKill_ListMySecKill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecKillServer).ListMySecKill(ctx, req.(*ListMySecKillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MySecKill_ServiceDesc is the grpc.ServiceDesc for MySecKill service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySecKill_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.my_sec_kill.v1.MySecKill",
	HandlerType: (*MySecKillServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMySecKill",
			Handler:    _MySecKill_CreateMySecKill_Handler,
		},
		{
			MethodName: "UpdateMySecKill",
			Handler:    _MySecKill_UpdateMySecKill_Handler,
		},
		{
			MethodName: "DeleteMySecKill",
			Handler:    _MySecKill_DeleteMySecKill_Handler,
		},
		{
			MethodName: "GetMySecKill",
			Handler:    _MySecKill_GetMySecKill_Handler,
		},
		{
			MethodName: "ListMySecKill",
			Handler:    _MySecKill_ListMySecKill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/my_sec_kill/v1/my_sec_kill.proto",
}
