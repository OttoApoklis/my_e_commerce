// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package new

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"my_e_commerce/data/dal/model"
)

func newUserQuotum(db *gorm.DB, opts ...gen.DOOption) userQuotum {
	_userQuotum := userQuotum{}

	_userQuotum.userQuotumDo.UseDB(db, opts...)
	_userQuotum.userQuotumDo.UseModel(&model.UserQuotum{})

	tableName := _userQuotum.userQuotumDo.TableName()
	_userQuotum.ALL = field.NewAsterisk(tableName)
	_userQuotum.ID = field.NewUint32(tableName, "id")
	_userQuotum.UserID = field.NewUint32(tableName, "user_id")
	_userQuotum.GoodsID = field.NewUint32(tableName, "goods_id")
	_userQuotum.Num = field.NewUint32(tableName, "num")
	_userQuotum.KilledNum = field.NewUint32(tableName, "killed_num")
	_userQuotum.CreateTime = field.NewTime(tableName, "create_time")
	_userQuotum.ModifyTime = field.NewTime(tableName, "modify_time")

	_userQuotum.fillFieldMap()

	return _userQuotum
}

// userQuotum 用户限额表
type userQuotum struct {
	userQuotumDo

	ALL        field.Asterisk
	ID         field.Uint32 // ID
	UserID     field.Uint32 // 用户ID
	GoodsID    field.Uint32 // 商品ID
	Num        field.Uint32 // 限额
	KilledNum  field.Uint32 // 已经消耗的额度
	CreateTime field.Time   // 创建时间
	ModifyTime field.Time   // 修改时间

	fieldMap map[string]field.Expr
}

func (u userQuotum) Table(newTableName string) *userQuotum {
	u.userQuotumDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userQuotum) As(alias string) *userQuotum {
	u.userQuotumDo.DO = *(u.userQuotumDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userQuotum) updateTableName(table string) *userQuotum {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint32(table, "id")
	u.UserID = field.NewUint32(table, "user_id")
	u.GoodsID = field.NewUint32(table, "goods_id")
	u.Num = field.NewUint32(table, "num")
	u.KilledNum = field.NewUint32(table, "killed_num")
	u.CreateTime = field.NewTime(table, "create_time")
	u.ModifyTime = field.NewTime(table, "modify_time")

	u.fillFieldMap()

	return u
}

func (u *userQuotum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userQuotum) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 7)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["goods_id"] = u.GoodsID
	u.fieldMap["num"] = u.Num
	u.fieldMap["killed_num"] = u.KilledNum
	u.fieldMap["create_time"] = u.CreateTime
	u.fieldMap["modify_time"] = u.ModifyTime
}

func (u userQuotum) clone(db *gorm.DB) userQuotum {
	u.userQuotumDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userQuotum) replaceDB(db *gorm.DB) userQuotum {
	u.userQuotumDo.ReplaceDB(db)
	return u
}

type userQuotumDo struct{ gen.DO }

type IUserQuotumDo interface {
	gen.SubQuery
	Debug() IUserQuotumDo
	WithContext(ctx context.Context) IUserQuotumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserQuotumDo
	WriteDB() IUserQuotumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserQuotumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserQuotumDo
	Not(conds ...gen.Condition) IUserQuotumDo
	Or(conds ...gen.Condition) IUserQuotumDo
	Select(conds ...field.Expr) IUserQuotumDo
	Where(conds ...gen.Condition) IUserQuotumDo
	Order(conds ...field.Expr) IUserQuotumDo
	Distinct(cols ...field.Expr) IUserQuotumDo
	Omit(cols ...field.Expr) IUserQuotumDo
	Join(table schema.Tabler, on ...field.Expr) IUserQuotumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserQuotumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserQuotumDo
	Group(cols ...field.Expr) IUserQuotumDo
	Having(conds ...gen.Condition) IUserQuotumDo
	Limit(limit int) IUserQuotumDo
	Offset(offset int) IUserQuotumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserQuotumDo
	Unscoped() IUserQuotumDo
	Create(values ...*model.UserQuotum) error
	CreateInBatches(values []*model.UserQuotum, batchSize int) error
	Save(values ...*model.UserQuotum) error
	First() (*model.UserQuotum, error)
	Take() (*model.UserQuotum, error)
	Last() (*model.UserQuotum, error)
	Find() ([]*model.UserQuotum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserQuotum, err error)
	FindInBatches(result *[]*model.UserQuotum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserQuotum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserQuotumDo
	Assign(attrs ...field.AssignExpr) IUserQuotumDo
	Joins(fields ...field.RelationField) IUserQuotumDo
	Preload(fields ...field.RelationField) IUserQuotumDo
	FirstOrInit() (*model.UserQuotum, error)
	FirstOrCreate() (*model.UserQuotum, error)
	FindByPage(offset int, limit int) (result []*model.UserQuotum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserQuotumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userQuotumDo) Debug() IUserQuotumDo {
	return u.withDO(u.DO.Debug())
}

func (u userQuotumDo) WithContext(ctx context.Context) IUserQuotumDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userQuotumDo) ReadDB() IUserQuotumDo {
	return u.Clauses(dbresolver.Read)
}

func (u userQuotumDo) WriteDB() IUserQuotumDo {
	return u.Clauses(dbresolver.Write)
}

func (u userQuotumDo) Session(config *gorm.Session) IUserQuotumDo {
	return u.withDO(u.DO.Session(config))
}

func (u userQuotumDo) Clauses(conds ...clause.Expression) IUserQuotumDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userQuotumDo) Returning(value interface{}, columns ...string) IUserQuotumDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userQuotumDo) Not(conds ...gen.Condition) IUserQuotumDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userQuotumDo) Or(conds ...gen.Condition) IUserQuotumDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userQuotumDo) Select(conds ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userQuotumDo) Where(conds ...gen.Condition) IUserQuotumDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userQuotumDo) Order(conds ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userQuotumDo) Distinct(cols ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userQuotumDo) Omit(cols ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userQuotumDo) Join(table schema.Tabler, on ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userQuotumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userQuotumDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userQuotumDo) Group(cols ...field.Expr) IUserQuotumDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userQuotumDo) Having(conds ...gen.Condition) IUserQuotumDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userQuotumDo) Limit(limit int) IUserQuotumDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userQuotumDo) Offset(offset int) IUserQuotumDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userQuotumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserQuotumDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userQuotumDo) Unscoped() IUserQuotumDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userQuotumDo) Create(values ...*model.UserQuotum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userQuotumDo) CreateInBatches(values []*model.UserQuotum, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userQuotumDo) Save(values ...*model.UserQuotum) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userQuotumDo) First() (*model.UserQuotum, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuotum), nil
	}
}

func (u userQuotumDo) Take() (*model.UserQuotum, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuotum), nil
	}
}

func (u userQuotumDo) Last() (*model.UserQuotum, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuotum), nil
	}
}

func (u userQuotumDo) Find() ([]*model.UserQuotum, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserQuotum), err
}

func (u userQuotumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserQuotum, err error) {
	buf := make([]*model.UserQuotum, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userQuotumDo) FindInBatches(result *[]*model.UserQuotum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userQuotumDo) Attrs(attrs ...field.AssignExpr) IUserQuotumDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userQuotumDo) Assign(attrs ...field.AssignExpr) IUserQuotumDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userQuotumDo) Joins(fields ...field.RelationField) IUserQuotumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userQuotumDo) Preload(fields ...field.RelationField) IUserQuotumDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userQuotumDo) FirstOrInit() (*model.UserQuotum, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuotum), nil
	}
}

func (u userQuotumDo) FirstOrCreate() (*model.UserQuotum, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserQuotum), nil
	}
}

func (u userQuotumDo) FindByPage(offset int, limit int) (result []*model.UserQuotum, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userQuotumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userQuotumDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userQuotumDo) Delete(models ...*model.UserQuotum) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userQuotumDo) withDO(do gen.Dao) *userQuotumDo {
	u.DO = *do.(*gen.DO)
	return u
}
