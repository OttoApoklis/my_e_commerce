// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package new

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Good          *good
	Order         *order
	Quotum        *quotum
	SeckillRecord *seckillRecord
	SeckillStock  *seckillStock
	UserQuotum    *userQuotum
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Good = &Q.Good
	Order = &Q.Order
	Quotum = &Q.Quotum
	SeckillRecord = &Q.SeckillRecord
	SeckillStock = &Q.SeckillStock
	UserQuotum = &Q.UserQuotum
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Good:          newGood(db, opts...),
		Order:         newOrder(db, opts...),
		Quotum:        newQuotum(db, opts...),
		SeckillRecord: newSeckillRecord(db, opts...),
		SeckillStock:  newSeckillStock(db, opts...),
		UserQuotum:    newUserQuotum(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Good          good
	Order         order
	Quotum        quotum
	SeckillRecord seckillRecord
	SeckillStock  seckillStock
	UserQuotum    userQuotum
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Good:          q.Good.clone(db),
		Order:         q.Order.clone(db),
		Quotum:        q.Quotum.clone(db),
		SeckillRecord: q.SeckillRecord.clone(db),
		SeckillStock:  q.SeckillStock.clone(db),
		UserQuotum:    q.UserQuotum.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Good:          q.Good.replaceDB(db),
		Order:         q.Order.replaceDB(db),
		Quotum:        q.Quotum.replaceDB(db),
		SeckillRecord: q.SeckillRecord.replaceDB(db),
		SeckillStock:  q.SeckillStock.replaceDB(db),
		UserQuotum:    q.UserQuotum.replaceDB(db),
	}
}

type queryCtx struct {
	Good          IGoodDo
	Order         IOrderDo
	Quotum        IQuotumDo
	SeckillRecord ISeckillRecordDo
	SeckillStock  ISeckillStockDo
	UserQuotum    IUserQuotumDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Good:          q.Good.WithContext(ctx),
		Order:         q.Order.WithContext(ctx),
		Quotum:        q.Quotum.WithContext(ctx),
		SeckillRecord: q.SeckillRecord.WithContext(ctx),
		SeckillStock:  q.SeckillStock.WithContext(ctx),
		UserQuotum:    q.UserQuotum.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
